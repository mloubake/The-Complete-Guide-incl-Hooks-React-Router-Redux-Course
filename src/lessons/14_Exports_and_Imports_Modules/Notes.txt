In Javascript when we want to use an external code in some part of the project, we use Import and Export.
They differ by the use (or absence) of {} in the import. 

Exports:
- There are two ways to export a piece of code, the 'Default Export' and 'Named Export'.

Assuming we have these pieces of code.

//person.js - Default Export (This type of export have the keyword DEFAULT before the function name.)                                
const person = {                         
    name: 'Max'
}

export default person;


//utility.js - Named Export (Doesn't have the keyword default)
export const clean = () => {...}

export const baseData = 10;

This difference is relevant how we import functions in another part.


---------------------------------------------------------------------------------------------------------

Imports:
- The way we gonna import our code differs by the type of the export.

import person from './person.js'  
import prs from './person.js'  (These two lines of code uses the Default Export)

import { baseData } from './utility.js'
import { clean } from './utility.js' (These two lines of code uses the Named Export)

---------------------------------------------------------------------------------------------------------

Additional Considerations:

- In the Default Export, the name doesn't matter when we import the code, it can be person or prs ou any-
thing you like.
- In other hand, the Named Export we need to use the name of the function, but we can use the AS keyword (
alias) to rename the function. Other ability of the named export is the capacity to imnport multiple
function in one line, and the ability to import all functions using the * keyword.

Check the differences below:

import person from './person.js'
import prs from './person.js'

import { smth } from './utility.js'
import { smth as SMTH } from './utility.js'
import * as bundled from './utility.js'

